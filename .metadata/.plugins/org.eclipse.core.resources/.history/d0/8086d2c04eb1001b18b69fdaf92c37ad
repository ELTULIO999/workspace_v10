//**************************************************************************************************************
// Librerías
//**************************************************************************************************************
#include <stdint.h>
#include <stdbool.h>
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"

//**************************************************************************************************************
// Variables Globales
//**************************************************************************************************************
char a;
int b;

//**************************************************************************************************************
// Prototipos de Funciones
//**************************************************************************************************************
void UART_INIT(void);
int main(void){

    a = 0;
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_TIMER0));
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
    TimerLoadSet(TIMER0_BASE, TIMER_A, 20000000-1);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    IntEnable(INT_TIMER0A);
    //UARTIntEnable(UART0_BASE, UART_INT_RX | UART_INT_RT);
    //IntEnable(INT_UART0);
    IntMasterEnable();
    TimerEnable(TIMER0_BASE, TIMER_A);
    UART_INIT();
    while (1){
        a = UARTCharGet(UART0_BASE);
        UARTCharPut(UART0_BASE, a);
        if (a == 'r'){
            if (b == 2){
                b = 0;
            }
            else {
                b = 2;
            }
        }
        else if (a == 'g'){
            if (b == 8){
                b = 0;
            }
            else {
                b = 8;
            }
        }
        else if (a == 'b'){
            if (b == 4){
                b = 0;
            }
            else {
                b = 4;
            }
        }

    }

}
void Timer0IntHandeler(void){
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    if (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_1)){
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0);
            }
        else if (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_2)){
                GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0);
            }
        else if (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_3)){
                    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, 0);
                }
        else{
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, b);
            }
}
void UART_INIT(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    GPIOPinTypeUART(GPIO_PORTA_BASE,GPIO_PIN_0|GPIO_PIN_1);
    UARTConfigSetExpClk(UART0_BASE,SysCtlClockGet(),115200,(UART_CONFIG_WLEN_8|UART_CONFIG_STOP_ONE|UART_CONFIG_PAR_NONE));
    UARTCharPut(UART0_BASE, 'H');
    //a = UARTCharGet(UART0_BASE);
}
void UARTIntHandler(void){
    UARTIntClear(UART0_BASE, UART_INT_RX | UART_INT_RT);
    a = UARTCharGet(UART0_BASE);
}
